# Default values for panopticon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Overrides name template
nameOverride: ""
# Overrides fullname template
fullnameOverride: ""
# Number of Panopticon operator replicas to create (only 1 is supported)
replicaCount: 1
# License for the product.
# Get a license by following the steps from [here](https://license-issuer.appscode.com/).
# Example:
# helm install appscode/panopticon \
#   --set-file license=/path/to/license/file
# or
# helm install appscode/panopticon \
#   --set license=<license file content>
license: ""
# Name of Secret with the license as key.txt key
licenseSecretName: ""
# Docker registry fqdn used to pull docker images
# Set this to use docker registry hosted at ${registryFQDN}/${registry}/${image}
registryFQDN: ghcr.io
# Namespace selector for target objects.
# Metrics will be collected only for selected namespace resources.
# Given selector should be parsable using labels.Parse()
# Ref: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse
namespaceSelector: ""
image:
  # Docker registry used to pull operator image
  registry: appscode
  # Name of operator container image
  repository: panopticon
  # Operator container image tag
  tag: ""
  # Compute Resources required by the operator container
  resources: {}
  # Security options this container should run with
  securityContext: # +doc-gen:break
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault
cleaner:
  # Docker registry used to pull Webhook cleaner image
  registry: appscode
  # Webhook cleaner container image
  repository: kubectl-nonroot
  # Webhook cleaner container image tag
  tag: "1.31"
  # Skip generating cleaner YAML
  skip: false
  # Security options this container should run with
  securityContext: # +doc-gen:break
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

# Specify an array of imagePullSecrets.
# Secrets must be manually created in the namespace.
#
# Example:
# helm template charts/panopticon \
#   --set imagePullSecrets[0].name=sec0 \
#   --set imagePullSecrets[1].name=sec1
imagePullSecrets: []
# Container image pull policy
imagePullPolicy: IfNotPresent
# If true, installs Panopticon operator as critical addon
criticalAddon: false
# Log level for operator
logLevel: 3
# Annotations applied to operator deployment
annotations: {}
# Annotations passed to operator pod(s).
podAnnotations: {}
# Node labels for pod assignment
nodeSelector: # +doc-gen:break
  kubernetes.io/os: linux
# Tolerations for pod assignment
tolerations: []
# Affinity rules for pod assignment
affinity: {}
# Security options the operator pod should run with.
podSecurityContext: # +doc-gen:break
  fsGroup: 65535
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
apiserver:
  # The minimum priority the webhook api group should have at least. Please see
  # https://github.com/kubernetes/kube-aggregator/blob/release-1.9/pkg/apis/apiregistration/v1beta1/types.go#L58-L64
  # for more information on proper values of this field.
  groupPriorityMinimum: 10000
  # The ordering of the webhook api inside of the group. Please see
  # https://github.com/kubernetes/kube-aggregator/blob/release-1.9/pkg/apis/apiregistration/v1beta1/types.go#L66-L70
  # for more information on proper values of this field
  versionPriority: 15
  # If true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.com/Azure/AKS/issues/522 (default true)
  useKubeapiserverFqdnForAks: true
  # If true, validating webhook is configured for MetricsConfigurations CRDs
  enableValidatingWebhook: true
  healthcheck:
    # If true, enables the readiness and liveliness probes for the operator pod.
    enabled: false
  servingCerts:
    # If true, generates on install/upgrade the certs that allow the kube-apiserver (and potentially ServiceMonitor)
    # to authenticate operators pods. Otherwise specify certs in `apiserver.servingCerts.{caCrt, serverCrt, serverKey}`.
    # See also: [example terraform](https://github.com/kubeops/installer/blob/master/charts/identity-server/example-terraform.tf)
    generate: true
    # CA certficate used by serving certificate of webhook server.
    caCrt: ""
    # Serving certficate used by webhook server.
    serverCrt: ""
    # Private key for the serving certificate used by webhook server.
    serverKey: ""
monitoring:
  # Name of monitoring agent (one of "prometheus.io", "prometheus.io/operator", "prometheus.io/builtin")
  agent: prometheus.io/operator
  serviceMonitor:
    # Specify the labels for ServiceMonitor.
    # Prometheus crd will select ServiceMonitor using these labels.
    # Only usable when monitoring agent is `prometheus.io/operator`.
    labels: # +doc-gen:break
      monitoring.appscode.com/prometheus: federated

networkPolicy:
  enabled: false

ace-user-roles:
  # If enabled, installs the ace-user-roles chart
  enabled: true
  enableClusterRoles:
    ace: false
    appcatalog: false
    catalog: false
    cert-manager: false
    kubedb-ui: false
    kubedb: false
    kubestash: false
    kubevault: false
    license-proxyserver: true
    metrics: true
    prometheus: false
    secrets-store: false
    stash: false
    virtual-secrets: false
